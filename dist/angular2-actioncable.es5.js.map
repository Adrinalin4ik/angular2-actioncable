{"version":3,"file":"angular2-actioncable.es5.js","sources":["ts/angular2-actioncable.ts","ts/src/action-cable.service.ts","ts/src/cable.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Cable,Channel,ActionCableService} from './index';\n","import { Injectable } from '@angular/core';\nimport { Cable } from './cable';\nexport class ActionCableService {\nprivate cables: {[s: string]: Cable} = {};\n/**\n * Open a new ActionCable connection to the url. Any number of connections can be created.\n * @param {?} url\n * @param {?=} params\n * @return {?}\n */\ncable(url: string, params?: any): Cable {\n    if (!this.cables.hasOwnProperty(url)) {\n      this.cables[url] = new Cable(this.buildUrl(url, params));\n    }\n\n    return this.cables[url];\n  }\n/**\n * Close an open connection for the url.\n * @param {?} url\n * @return {?}\n */\ndisconnect(url) {\n    if (this.cables.hasOwnProperty(url)) {\n      this.cables[url].disconnect();\n      delete this.cables[url];\n    }\n  }\n/**\n * @param {?} url\n * @param {?=} params\n * @return {?}\n */\nprotected buildUrl(url: string, params?: any): string {\n    if (!params) {\n      return url;\n    }\n\n    const /** @type {?} */ paramString = Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n\n    return [url, paramString].join('?');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ActionCableService_tsickle_Closure_declarations() {\n/** @type {?} */\nActionCableService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActionCableService.ctorParameters;\n/** @type {?} */\nActionCableService.prototype.cables;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import * as ActionCableNs from 'actioncable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst /** @type {?} */ ActionCable = ActionCableNs;\nexport class Cable {\n  baseCable: any;\n/**\n * @param {?} url\n */\nconstructor(public url: string) {\n    this.baseCable = ActionCable.createConsumer(this.url);\n  }\n/**\n * Create a new subscription to a channel, optionally with topic paramters.\n * @param {?} name\n * @param {?=} params\n * @return {?}\n */\nchannel(name: string, params = {}): Channel {\n    return new Channel(this, name, params);\n  }\n/**\n * Close the connection.\n * @return {?}\n */\ndisconnect() {\n    return this.baseCable.disconnect();\n  }\n}\n\nfunction Cable_tsickle_Closure_declarations() {\n/** @type {?} */\nCable.prototype.baseCable;\n/** @type {?} */\nCable.prototype.url;\n}\n\nexport class Channel {\n/**\n * Once a channel subscription is created, the messages Observable will emit any messages the channel receives.\n * For easy clean-up, when this Observable is completed the ActionCable channel will also be closed.\n */\nmessages: BehaviorSubject<any> = new BehaviorSubject({});\n  baseChannel: any;\n  onrejected: BehaviorSubject<any> = new BehaviorSubject({});\n  onclose: BehaviorSubject<any> = new BehaviorSubject({});\n  onerror: BehaviorSubject<any> = new BehaviorSubject({});\n  onconnected: BehaviorSubject<any> = new BehaviorSubject({});\n/**\n * @param {?} cable\n * @param {?} name\n * @param {?=} params\n */\nconstructor(public cable: Cable,\npublic name: string,\npublic params = {}) {\n    console.warn(\"NEW\")\n    const channelParams = Object.assign({}, params, {channel: name});\n    this.baseChannel = this.cable.baseCable.subscriptions.create(channelParams, {\n      received: (data: any) => { \n        this.messages.next(data);\n      },\n      connected: (data: any) => { \n        this.onconnected.next(data);\n      },\n      open: (data: any) => { \n        this.onrejected.next(data);\n      },\n      close: (data: any) => { \n        this.onclose.next(data);\n      },\n      error: (data: any) => { \n        this.onerror.next(data);\n      }\n    });\n    //return () => this.unsubscribe();\n  }\n/**\n * Close the connection.\n * @param {?} data\n * @return {?}\n */\nsend(data: any) {\n    this.baseChannel.send(data);\n  }\n/**\n * Close the connection.\n * @return {?}\n */\nunsubscribe() {\n    this.cable.baseCable.subscriptions.remove(this.baseChannel);\n  }\n}\n\nfunction Channel_tsickle_Closure_declarations() {\n/**\n * Once a channel subscription is created, the messages Observable will emit any messages the channel receives.\n * For easy clean-up, when this Observable is completed the ActionCable channel will also be closed.\n * @type {?}\n */\nChannel.prototype.messages;\n/** @type {?} */\nChannel.prototype.baseChannel;\n/** @type {?} */\nChannel.prototype.onrejected;\n/** @type {?} */\nChannel.prototype.onclose;\n/** @type {?} */\nChannel.prototype.onerror;\n/** @type {?} */\nChannel.prototype.onconnected;\n/** @type {?} */\nChannel.prototype.cable;\n/** @type {?} */\nChannel.prototype.name;\n/** @type {?} */\nChannel.prototype.params;\n}\n\n"],"names":["BehaviorSubject"],"mappings":"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"}
