{"version":3,"file":"angular2-actioncable.umd.min.js","sources":["~/angular2-actioncable/src/cable.ts","~/angular2-actioncable/src/action-cable.service.ts"],"sourcesContent":["import * as ActionCableNs from 'actioncable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst /** @type {?} */ ActionCable = ActionCableNs;\nexport class Cable {\n  baseCable: any;\n/**\n * @param {?} url\n */\nconstructor(public url: string) {\n    this.baseCable = ActionCable.createConsumer(this.url);\n  }\n/**\n * Create a new subscription to a channel, optionally with topic paramters.\n * @param {?} name\n * @param {?=} params\n * @return {?}\n */\nchannel(name: string, params = {}): Channel {\n    return new Channel(this, name, params);\n  }\n/**\n * Close the connection.\n * @return {?}\n */\ndisconnect() {\n    return this.baseCable.disconnect();\n  }\n}\n\nfunction Cable_tsickle_Closure_declarations() {\n/** @type {?} */\nCable.prototype.baseCable;\n/** @type {?} */\nCable.prototype.url;\n}\n\nexport class Channel {\n/**\n * Once a channel subscription is created, the messages Observable will emit any messages the channel receives.\n * For easy clean-up, when this Observable is completed the ActionCable channel will also be closed.\n */\nmessages: BehaviorSubject<any> = new BehaviorSubject({});\n  baseChannel: any;\n  onrejected: BehaviorSubject<any> = new BehaviorSubject({});\n  onclose: BehaviorSubject<any> = new BehaviorSubject({});\n  onerror: BehaviorSubject<any> = new BehaviorSubject({});\n  onconnected: BehaviorSubject<any> = new BehaviorSubject({});\n/**\n * @param {?} cable\n * @param {?} name\n * @param {?=} params\n */\nconstructor(public cable: Cable,\npublic name: string,\npublic params = {}) {\n    console.warn(\"NEW\")\n    const channelParams = Object.assign({}, params, {channel: name});\n    this.baseChannel = this.cable.baseCable.subscriptions.create(channelParams, {\n      received: (data: any) => { \n        this.messages.next(data);\n      },\n      connected: (data: any) => { \n        this.onconnected.next(data);\n      },\n      open: (data: any) => { \n        this.onrejected.next(data);\n      },\n      close: (data: any) => { \n        this.onclose.next(data);\n      },\n      error: (data: any) => { \n        this.onerror.next(data);\n      }\n    });\n    //return () => this.unsubscribe();\n  }\n/**\n * Close the connection.\n * @param {?} data\n * @return {?}\n */\nsend(data: any) {\n    this.baseChannel.send(data);\n  }\n/**\n * Close the connection.\n * @return {?}\n */\nunsubscribe() {\n    this.cable.baseCable.subscriptions.remove(this.baseChannel);\n  }\n}\n\nfunction Channel_tsickle_Closure_declarations() {\n/**\n * Once a channel subscription is created, the messages Observable will emit any messages the channel receives.\n * For easy clean-up, when this Observable is completed the ActionCable channel will also be closed.\n * @type {?}\n */\nChannel.prototype.messages;\n/** @type {?} */\nChannel.prototype.baseChannel;\n/** @type {?} */\nChannel.prototype.onrejected;\n/** @type {?} */\nChannel.prototype.onclose;\n/** @type {?} */\nChannel.prototype.onerror;\n/** @type {?} */\nChannel.prototype.onconnected;\n/** @type {?} */\nChannel.prototype.cable;\n/** @type {?} */\nChannel.prototype.name;\n/** @type {?} */\nChannel.prototype.params;\n}\n\n","import { Injectable } from '@angular/core';\nimport { Cable } from './cable';\nexport class ActionCableService {\nprivate cables: {[s: string]: Cable} = {};\n/**\n * Open a new ActionCable connection to the url. Any number of connections can be created.\n * @param {?} url\n * @param {?=} params\n * @return {?}\n */\ncable(url: string, params?: any): Cable {\n    if (!this.cables.hasOwnProperty(url)) {\n      this.cables[url] = new Cable(this.buildUrl(url, params));\n    }\n\n    return this.cables[url];\n  }\n/**\n * Close an open connection for the url.\n * @param {?} url\n * @return {?}\n */\ndisconnect(url) {\n    if (this.cables.hasOwnProperty(url)) {\n      this.cables[url].disconnect();\n      delete this.cables[url];\n    }\n  }\n/**\n * @param {?} url\n * @param {?=} params\n * @return {?}\n */\nprotected buildUrl(url: string, params?: any): string {\n    if (!params) {\n      return url;\n    }\n\n    const /** @type {?} */ paramString = Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n\n    return [url, paramString].join('?');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ActionCableService_tsickle_Closure_declarations() {\n/** @type {?} */\nActionCableService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActionCableService.ctorParameters;\n/** @type {?} */\nActionCableService.prototype.cables;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["ActionCable","ActionCableNs","Cable","url","this","baseCable","createConsumer","prototype","channel","name","params","Channel","disconnect","cable","_this","messages","BehaviorSubject","onrejected","onclose","onerror","onconnected","console","warn","channelParams","Object","assign","baseChannel","subscriptions","create","received","data","next","connected","open","close","error","send","unsubscribe","remove","ActionCableService","cables","hasOwnProperty","buildUrl","keys","map","key","encodeURIComponent","join","decorators","type","Injectable","ctorParameters"],"mappings":"kXAGA,IAAMA,EAAcC,EACpBC,EAAA,WAKA,SAAAA,EAFqBC,GAAAC,KAArBD,IAAqBA,EAGjBC,KAAKC,UAAYL,EAAYM,eAAeF,KAAKD,KAkBrD,OAVAD,EAAAK,UAAAC,QAAA,SAJGC,EAAAC,GAKC,YALJ,IAAAA,IAAGA,MACQ,IAAIC,EAAQP,KAAMK,EAAMC,IAUnCR,EAAAK,UAAAK,WAAA,WACI,OAJOR,KAAKC,UAAUO,cAM1BV,EAxBA,GA0BAS,EAAA,WAuBA,SAAAA,EAfqBE,EAAqBJ,EAAqBC,QAA/D,IAAAA,IAA+DA,MAe/D,IAAAI,EAAAV,KAfqBA,KAArBS,MAAqBA,EAAqBT,KAA1CK,KAA0CA,EAAqBL,KAA/DM,OAA+DA,EAI/DN,KAAAW,SAXG,IAAAC,EAAAA,oBAaDZ,KAAFa,WAXqC,IAAID,EAAAA,oBAYvCZ,KAAFc,QAXkC,IAAIF,EAAAA,oBAYpCZ,KAAFe,QAXkC,IAAIH,EAAAA,oBAYpCZ,KAAFgB,YAXsC,IAAIJ,EAAAA,oBAoBtCK,QAAQC,KAAK,OACb,IAAMC,EAAgBC,OAAOC,UAAWf,GAASF,QAASC,IAC1DL,KAAKsB,YAActB,KAAKS,MAAMR,UAAUsB,cAAcC,OAAOL,GAC3DM,SAAU,SAACC,GACThB,EAAKC,SAASgB,KAAKD,IAErBE,UAAW,SAACF,GACVhB,EAAKM,YAAYW,KAAKD,IAExBG,KAAM,SAACH,GACLhB,EAAKG,WAAWc,KAAKD,IAEvBI,MAAO,SAACJ,GACNhB,EAAKI,QAAQa,KAAKD,IAEpBK,MAAO,SAACL,GACNhB,EAAKK,QAAQY,KAAKD,MAoB1B,OAVAnB,EAAAJ,UAAA6B,KAAA,SAlBGN,GAmBC1B,KAlBKsB,YAAYU,KAAKN,IAwB1BnB,EAAAJ,UAAA8B,YAAA,WACIjC,KAlBKS,MAAMR,UAAUsB,cAAcW,OAAOlC,KAAKsB,cAoBnDf,EA9DA,GC5BA4B,EAAA,WAAA,SAAAA,IAGUnC,KAAVoC,iBAKAD,EAAAhC,UAAAM,MAAA,SAAGV,EAAAO,GAKC,OAJKN,KAAKoC,OAAOC,eAAetC,KAC9BC,KAAKoC,OAAOrC,GAAO,IAAID,EAAME,KAAKsC,SAASvC,EAAKO,KAG3CN,KAAKoC,OAAOrC,IAOvBoC,EAAAhC,UAAAK,WAAA,SADGT,GAEKC,KADKoC,OAAOC,eAAetC,KAE7BC,KADKoC,OAAOrC,GAAKS,oBACVR,KAAKoC,OAAOrC,KAItBoC,EAAHhC,UAAAmC,SAAG,SAAAvC,EAAAO,GAMC,IALKA,EAMH,OALOP,EAYT,OALOA,EAJaqB,OAAOmB,KAAKjC,GAM7BkC,IALI,SAAAC,GAAO,OAAAC,mBAAsBD,GAKxC,IAL6CC,mBAAsBpC,EAAOmC,MAMnEE,KALK,MAEkBA,KAAK,QAnCnC,GAqCOR,EAAPS,aACEC,KAAMC,EAAAA,aAGPX,EAADY,eAAC,WAAA"}
